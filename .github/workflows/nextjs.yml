# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Deploy Next.js site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "gh-pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      
      - name: Configure Next.js for GitHub Pages
        run: |
          # Create a main site config with basePath for the repository
          cat > next.config.pages.ts << 'EOF'
          import type { NextConfig } from "next";

          const nextConfig: NextConfig = {
            basePath: "/foxhole-materials-calculator",
            assetPrefix: "/foxhole-materials-calculator",
            trailingSlash: true,
            output: "export",
            images: {
              unoptimized: true,
              remotePatterns: [
                {
                  protocol: 'https',
                  hostname: 'foxhole.wiki.gg',
                  port: '',
                  pathname: '/images/**',
                  search: '',
                },
              ],
            },
          };

          export default nextConfig;
          EOF
          
          # Backup original config and use the Pages config
          mv next.config.ts next.config.original.ts
          mv next.config.pages.ts next.config.ts
      
      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
      
      - name: Restore original config  
        run: mv next.config.original.ts next.config.ts
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  # Deployment job
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Download built site
        uses: actions/download-artifact@v4
        with:
          name: github-pages
          path: ./build-artifacts
      
      - name: Extract and deploy to gh-pages
        run: |
          # Extract the artifact (it's a tar file)
          cd build-artifacts
          tar -xf artifact.tar
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if gh-pages branch exists
          if git ls-remote --heads origin | grep -q "refs/heads/gh-pages"; then
            echo "gh-pages branch exists, checking out"
            git fetch origin gh-pages
            git checkout -f gh-pages
          else
            echo "Creating new gh-pages branch"
            git checkout --orphan gh-pages
            git rm -rf . 2>/dev/null || true
          fi
          
          # Clean up old main site files but preserve PR directories
          find . -maxdepth 1 -not -name '.' -not -name '.git' -not -name 'pr-*' -not -name '.gitignore' -exec rm -rf {} \;
          
          # Copy new main site files to root
          cp -r ../build-artifacts/* .
          rm -f artifact.tar  # Remove the tar file
          
          # Create/update .gitignore to prevent accidentally committing build artifacts  
          echo "node_modules/" > .gitignore
          echo "out/" >> .gitignore
          echo ".next/" >> .gitignore
          echo "*.log" >> .gitignore
          
          # Add and commit main site files
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Deploy main site to GitHub Pages"
            git push origin gh-pages
            echo "Main site deployed to gh-pages branch"
          fi
