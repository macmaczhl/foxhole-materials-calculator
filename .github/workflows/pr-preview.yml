name: Deploy PR Preview to Vercel

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: ["main"]

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: pr-preview-${{ github.event.number }}
  cancel-in-progress: true

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    environment: Preview
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Install dependencies
        if: github.event.action != 'closed'
        run: npm ci

      - name: Pull Vercel Environment Information
        if: github.event.action != 'closed'
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        if: github.event.action != 'closed'
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        if: github.event.action != 'closed'
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview_url=$url" >> $GITHUB_OUTPUT

      - name: Comment PR with Preview URL
        if: github.event.action != 'closed'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.issue.number;
            const previewUrl = '${{ steps.deploy.outputs.preview_url }}';
            
            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('Preview deployment')
            );
            
            const body = `## ðŸš€ Preview deployment
            
            Your preview deployment is ready!
            
            **Preview URL:** ${previewUrl}
            
            This preview will be updated automatically when you push new commits to this PR.
            
            ---
            
            Deployed with [Vercel](https://vercel.com) ðŸ”º`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: body
              });
            }

      - name: Get Vercel Deployments for Cleanup
        if: github.event.action == 'closed'
        id: get-deployments
        run: |
          # Get all deployments for this PR
          deployments=$(vercel list --token=${{ secrets.VERCEL_TOKEN }} --meta gitCommitRef=${{ github.head_ref }} --format json)
          echo "deployments=$deployments" >> $GITHUB_OUTPUT

      - name: Delete Vercel Deployments
        if: github.event.action == 'closed'
        run: |
          # Parse deployments and delete them
          echo '${{ steps.get-deployments.outputs.deployments }}' | jq -r '.[].uid' | while read deployment_id; do
            if [ ! -z "$deployment_id" ]; then
              echo "Deleting deployment: $deployment_id"
              vercel remove --token=${{ secrets.VERCEL_TOKEN }} --yes "$deployment_id" || echo "Failed to delete $deployment_id"
            fi
          done

      - name: Update PR Comment on Close
        if: github.event.action == 'closed'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.issue.number;
            
            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('Preview deployment')
            );
            
            if (botComment) {
              const body = `## ðŸš€ Preview deployment
              
              ~~Your preview deployment is ready!~~
              
              **Status:** Preview deployment has been cleaned up as the PR was closed.
              
              This preview was automatically removed when the PR was closed/merged.
              
              ---
              
              Deployed with [Vercel](https://vercel.com) ðŸ”º`;
              
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            }