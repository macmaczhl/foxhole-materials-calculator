name: Deploy PR Preview

on:
  pull_request:
    branches: ["main"]
    types: [opened, synchronize, reopened, closed]
  schedule:
    - cron: '0 2 * * 0'  # Weekly cleanup on Sundays at 2 AM UTC
  workflow_dispatch: # Allow manual triggering

# Sets permissions to allow deployment to GitHub Pages and commenting on PRs
permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write
  actions: write

# Allow multiple concurrent preview deployments
concurrency:
  group: "pr-preview-${{ github.event.number }}"
  cancel-in-progress: true

jobs:
  # Cleanup job for closed PRs
  cleanup:
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check if gh-pages branch exists and cleanup
        run: |
          # Check if gh-pages branch exists
          if git ls-remote --heads origin | grep -q "refs/heads/gh-pages"; then
            git checkout gh-pages
            if [ -d "pr-${{ github.event.number }}" ]; then
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action"
              rm -rf "pr-${{ github.event.number }}"
              git add .
              git commit -m "Remove preview for PR #${{ github.event.number }}" || exit 0
              git push
              echo "Preview directory removed for PR #${{ github.event.number }}"
            else
              echo "No preview directory found for PR #${{ github.event.number }}"
            fi
          else
            echo "No gh-pages branch found, nothing to cleanup"
          fi
      
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🗑️ Preview deployment has been cleaned up.'
            })

  # Build and deploy job for active PRs
  deploy:
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
      
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-pr-${{ github.event.number }}-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-pr-${{ github.event.number }}-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      
      - name: Create PR preview config
        run: |
          # Create a modified next.config.ts with basePath for PR preview
          cat > next.config.preview.ts << 'EOF'
          import type { NextConfig } from "next";

          const nextConfig: NextConfig = {
            basePath: "/foxhole-materials-calculator/pr-${{ github.event.number }}",
            assetPrefix: "/foxhole-materials-calculator/pr-${{ github.event.number }}",
            trailingSlash: true,
            output: "export",
            images: {
              unoptimized: true,
              remotePatterns: [
                {
                  protocol: 'https',
                  hostname: 'foxhole.wiki.gg',
                  port: '',
                  pathname: '/images/**',
                  search: '',
                },
              ],
            },
          };

          export default nextConfig;
          EOF
      
      - name: Build with Next.js
        run: |
          # Use the preview config for building  
          mv next.config.ts next.config.original.ts
          mv next.config.preview.ts next.config.ts
          ${{ steps.detect-package-manager.outputs.runner }} next build
          # Restore original config to avoid git issues
          mv next.config.original.ts next.config.ts
      
      - name: Setup and deploy to gh-pages
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Store build output path
          BUILD_OUTPUT_PATH="/tmp/pr-${{ github.event.number }}-build"
          mkdir -p "$BUILD_OUTPUT_PATH"
          cp -r out/* "$BUILD_OUTPUT_PATH/"
          
          # Check if gh-pages branch exists
          if git ls-remote --heads origin | grep -q "refs/heads/gh-pages"; then
            echo "gh-pages branch exists, checking out"
            git fetch origin gh-pages
            # Force checkout to avoid conflicts with modified files
            git checkout -f gh-pages
          else
            echo "Creating new gh-pages branch"
            git checkout --orphan gh-pages
            git rm -rf . 2>/dev/null || true
            echo "# GitHub Pages for PR Previews" > README.md
            git add README.md
            git commit -m "Initialize gh-pages branch for PR previews"
            git push -u origin gh-pages
          fi
          
          # Remove existing PR directory if it exists
          rm -rf "pr-${{ github.event.number }}"
          
          # Copy built files to PR directory
          mkdir -p "pr-${{ github.event.number }}"
          cp -r "$BUILD_OUTPUT_PATH"/* "pr-${{ github.event.number }}/"
          
          # Commit and push changes
          git add .
          git commit -m "Deploy preview for PR #${{ github.event.number }}" || exit 0
          git push
      
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const previewUrl = `https://${{ github.repository_owner }}.github.io/foxhole-materials-calculator/pr-${{ github.event.number }}/`;
            
            // Find existing preview comment
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const existingComment = comments.data.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('Preview deployment')
            );
            
            const body = `🚀 **Preview deployment ready!**

            📱 **Preview URL:** ${previewUrl}
            
            This preview will be automatically updated when you push new commits to this PR.
            The preview will be cleaned up automatically when this PR is closed or merged.`;
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }

  # Cleanup old previews (optional - runs weekly)
  cleanup-old:
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Clean up old PR previews
        run: |
          # Check if gh-pages branch exists
          if ! git ls-remote --heads origin | grep -q "refs/heads/gh-pages"; then
            echo "No gh-pages branch found, nothing to cleanup"
            exit 0
          fi
          
          git checkout gh-pages
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Get list of open PRs
          OPEN_PRS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls?state=open" | \
            jq -r '.[].number')
          
          # Find PR directories that are older than 30 days or not associated with open PRs
          for dir in pr-*; do
            if [ -d "$dir" ]; then
              PR_NUM=${dir#pr-}
              
              # Check if PR is still open
              if ! echo "$OPEN_PRS" | grep -q "^$PR_NUM$"; then
                echo "Removing directory for closed PR: $dir"
                rm -rf "$dir"
              else
                # Check if directory is older than 30 days
                LAST_MODIFIED=$(git log -1 --format="%ct" -- "$dir" 2>/dev/null || echo "0")
                CURRENT_TIME=$(date +%s)
                DAYS_OLD=$(( (CURRENT_TIME - LAST_MODIFIED) / 86400 ))
                
                if [ "$DAYS_OLD" -gt 30 ]; then
                  echo "Removing old preview directory (${DAYS_OLD} days old): $dir"
                  rm -rf "$dir"
                fi
              fi
            fi
          done
          
          # Commit changes if any directories were removed
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "Clean up old PR preview deployments"
            git push
            echo "Old preview deployments cleaned up"
          else
            echo "No old preview deployments to clean up"
          fi